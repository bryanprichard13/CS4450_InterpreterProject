%option noyywrap
%option yylineno

%{
    #include <string>
    #include <sstream>
    #include "parse.tab.h" /* generated by Makefile */

    using std::string;
    using std::istringstream;

    extern void yyerror(const char*, char);
%}

/* regex for types */
identity [_a-zA-Z][_0-9a-zA-Z]*
int   [0-9]+
float [0-9]*\.[0-9]+

%%

"#"[^\r\n]* { continue;         }
[ \t]       ;
"+"         { return yytext[0]; }
"-"         { return yytext[0]; }
"*"         { return yytext[0]; }
"/"         { return yytext[0]; }
"%"         { return yytext[0]; }
"^"         { return yytext[0]; }
"("         { return yytext[0]; }
")"         { return yytext[0]; }
"="         { return yytext[0]; }
":"         { return yytext[0]; }
","         { return yytext[0]; }
"<"         { return yytext[0]; }
">"         { return yytext[0]; }
"+="        { return PLUSEQ;    }
"-="        { return MINUSEQ;   }
"*="        { return TIMESEQ;   }
"/="        { return DIVEQ;     }
"^="        { return POWEQ;     }
"%="        { return MODEQ;     }


{identity}  { yylval.string = new char[strlen(yytext)+1];
           strcpy(yylval.string, yytext);
           return TOKEN_STRING;
         }

{float}  { istringstream(string(yytext)) >> yylval.float_value;
           return TOKEN_FLOAT;
         }

{int}    { istringstream(string(yytext)) >> yylval.int_value;
           return TOKEN_STRING;
         }

.       { yyerror("undefined token", yytext[0]); yyterminate(); }

%%
